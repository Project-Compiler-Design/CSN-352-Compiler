=====================LIST OF ERRORS===================================
Line 6 : Missing return statement
======================================================================
0x55bc954118b0 FUNC_BEGIN main
0x55bc954183c0 a:= 1
0x55bc954183c0 p:= &a
0x55bc954183c0 *p:=  10
0x55bc954183c0 c:= a
0x55bc954118b0 FUNC_END main
======================================================================
Printing scope table
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| main            | int                  | 4       | N/A        |
| printf          |                      | 0       | N/A        |
| scanf           |                      | 0       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| a               | int                  | 4       | 1          |
| c               | int                  | 4       | N/A        |
| p               | int*                 | 0       | N/A        |
-----------------------------------------------------------------
Function main stack size: 20
Pass 1 done
Liveness analysis done
FUNC_BEGIN main
a:= 1
Handling assignment: a := 1
Getting register for a
Assigned register $t9 to a
p:= &a
Handling pointer arrays: p:= &a
p &a
Getting register for p
Assigned register $t8 to p
*p:=  10
Handling pointer arrays: *p:=  10
*p 10
Getting register for p
Found register for p $t8
lhs p
c:= a
Handling assignment: c := a
Getting register for c
Assigned register $t7 to c
Getting register for a
Variable a is on stack, loading into register
FUNC_END main
Pass 2 done
################ MIPS Assembly Code ################ 
.text
.globl main
main:
    move $fp, $sp
    addi $sp, $sp, -20
    sw   $ra, 16($sp)
    sw   $fp, 12($sp)
    li $t9, 1
    #Pushing a to stack
    sw $t9, 0($sp)
    addi $t8, $sp, 0
    #Loading constant 10 into register
    li $t9, 10
    sw $t9, 0($t8)
    lw $t6, 0($sp)
    move $t7, $t6
    lw   $fp, 12($sp)
    lw   $ra, 16($sp)
    addi $sp, $sp, 20
    li $v0, 10
    syscall
