=====================LIST OF ERRORS===================================
Line 8 : Missing return statement
======================================================================
0x564ba6f7d8b0 FUNC_BEGIN addx
0x564ba6f858f0 a := PARAM
0x564ba6f858f0 b := PARAM
0x564ba6f84e40 t0 :=  b == 0
0x564ba6f84e40 if (t0) goto LABEL0
0x564ba6f84e40 goto LABEL1
0x564ba6f84e40 LABEL0:
0x564ba6f858f0 RETURN a
0x564ba6f84e40 goto LABEL2
0x564ba6f84e40 LABEL1:
0x564ba6f86060 t1 :=  b - 1
0x564ba6f86060 PARAM a
0x564ba6f86060 PARAM t1
0x564ba6f86060 t2 := CALL addx,2
0x564ba6f86060 t3 :=  a + t2
0x564ba6f86060 RETURN t3
0x564ba6f84e40 LABEL2:
0x564ba6f7d8b0 FUNC_END addx
0x564ba6f7d8b0 FUNC_BEGIN main
0x564ba6f88510 PARAM 5
0x564ba6f88510 PARAM 3
0x564ba6f88510 t4 := CALL addx,2
0x564ba6f88510 b:= t4
0x564ba6f88510 PARAM "HI%d\n"
0x564ba6f88510 PARAM b
0x564ba6f88510 t5 := CALL printf,2
0x564ba6f88510 RETURN 0
0x564ba6f7d8b0 FUNC_END main
======================================================================
Printing scope table
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| addx            | int                  | 4       | N/A        |
| main            | int                  | 4       | N/A        |
| printf          |                      | 0       | N/A        |
| scanf           |                      | 0       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| t1              | int                  | 4       | N/A        |
| t2              | int                  | 4       | N/A        |
| t3              | int                  | 4       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| a               | int                  | 4       | N/A        |
| b               | int                  | 4       | N/A        |
| t0              | int                  | 4       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| b               | int                  | 4       | N/A        |
| t4              | int                  | 4       | N/A        |
| t5              |                      | 0       | N/A        |
-----------------------------------------------------------------
Function addx stack size: 32
Function main stack size: 20
Pass 1 done
LHS: a, RHS: alloc 8
Token rhs: alloc
Error!!!! Variable alloc not found in any scope
Token lhs: a
LHS: b, RHS: PARAM
Token rhs: PARAM
Token lhs: b
LHS: t0, RHS: b == 0
Token rhs: b
Token lhs: t0
LHS: t1, RHS: b - 1
Token rhs: b
Token lhs: t1
LHS: t2, RHS: CALL addx,2
Token rhs: CALL
Token rhs: addx,2
Error!!!! Variable addx,2 not found in any scope
Token lhs: t2
LHS: t3, RHS: a + t2
Token rhs: a
Token rhs: t2
Token lhs: t3
LHS: t4, RHS: CALL addx,2
Token rhs: CALL
Token rhs: addx,2
Error!!!! Variable addx,2 not found in any scope
Token lhs: t4
LHS: b, RHS: t4
Token rhs: t4
Token lhs: b
LHS: t5, RHS: CALL printf,2
Token rhs: CALL
Token rhs: printf,2
Error!!!! Variable printf,2 not found in any scope
Token lhs: t5
Liveness analysis done
Inside pass2
FUNC_BEGIN addx
idhar
yaha
addx
abe
bahar
a := PARAM
Handling param receive: a := PARAM
Getting register for a
Assigned register $t9 to a
b := PARAM
Handling param receive: b := PARAM
Getting register for b
Assigned register $t8 to b
t0 :=  b == 0
Handling operation: t0 := b == 0
Getting register for b
Found register for b $t8
Loaded integer constant 0 into $t7
Getting register for t0
Assigned register $t6 to t0
Operation: b == 0
Registers: $t8, $t7, $t6
if (t0) goto LABEL0
idhar aagaya
Condition: t0, Label: LABEL0
Getting register for t0
Found register for t0 $t6
goto LABEL1
LABEL0:
RETURN a
addx hello a
Getting register for a
Found register for a $t9
exit done
goto LABEL2
LABEL1:
t1 :=  b - 1
Handling operation: t1 := b - 1
Getting register for b
Found register for b $t8
Loaded integer constant 1 into $t5
Getting register for t1
Assigned register $t4 to t1
Operation: b - 1
Registers: $t8, $t5, $t4
PARAM a
Getting register for a
Found register for a $t9
PARAM t1
Getting register for t1
Found register for t1 $t4
t2 := CALL addx,2
Handling assignment: t2 := CALL addx,2
Getting register for t2
Assigned register $t3 to t2
Handling function call: CALL addx,2
t3 :=  a + t2
Struct name: a
int
Handling operation: t3 := a + t2
Getting register for a
Found register for a $t9
Getting register for t2
Found register for t2 $t3
Getting register for t3
Assigned register $t2 to t3
Operation: a + t2
Registers: $t9, $t3, $t2
RETURN t3
addx hello t3
Getting register for t3
Found register for t3 $t2
exit done
LABEL2:
FUNC_END addx
exit done
FUNC_BEGIN main
idhar
yaha
main
abe
bahar
PARAM 5
PARAM 3
t4 := CALL addx,2
Handling assignment: t4 := CALL addx,2
Getting register for t4
Assigned register $t1 to t4
Handling function call: CALL addx,2
b:= t4
Handling assignment: b := t4
Getting register for b
Assigned register $t0 to b
Getting register for t4
Found register for t4 $t1
PARAM "HI%d\n"
PARAM b
Getting register for b
Found register for b $t0
t5 := CALL printf,2
Handling assignment: t5 := CALL printf,2
Getting register for t5
Handling register spill for t5
Spilling a from $t9
Assigned register $t9 to t5
Handling function call: CALL printf,2
printf me
----------------------2
RETURN 0
main hello 0
exit done
FUNC_END main
exit done
Pass 2 done
################ MIPS Assembly Code ################ 
.data
newline: .asciiz "\n"
str0: .asciiz "HI"
.text
.globl main
addx:
    move $fp, $sp
    addi $sp, $sp, -72
    sw   $ra, 68($sp)
    sw   $fp, 64($sp)
    sw   $t0, 60($sp)
    sw   $t1, 56($sp)
    sw   $t2, 52($sp)
    sw   $t3, 48($sp)
    sw   $t4, 44($sp)
    sw   $t5, 40($sp)
    sw   $t6, 36($sp)
    sw   $t7, 32($sp)
    sw   $t8, 28($sp)
    sw   $t9, 24($sp)
    move $t9, $a0
    move $t8, $a1
    li $t7, 0
    seq $t6, $t8, $t7
    bnez $t6, LABEL0
    j LABEL1
LABEL0:
    move $v0, $t9
    lw   $fp, 64($sp)
    lw   $ra, 68($sp)
    lw   $t0, 60($sp)
    lw   $t1, 56($sp)
    lw   $t2, 52($sp)
    lw   $t3, 48($sp)
    lw   $t4, 44($sp)
    lw   $t5, 40($sp)
    lw   $t6, 36($sp)
    lw   $t7, 32($sp)
    lw   $t8, 28($sp)
    lw   $t9, 24($sp)
    addi $sp, $sp, 72
    jr   $ra
    j LABEL2
LABEL1:
    li $t5, 1
    sub $t4, $t8, $t5
    move $a0, $t9
    move $a1, $t4
    jal addx
    move $t3, $v0
    add $t2, $t9, $t3
    move $v0, $t2
    lw   $fp, 64($sp)
    lw   $ra, 68($sp)
    lw   $t0, 60($sp)
    lw   $t1, 56($sp)
    lw   $t2, 52($sp)
    lw   $t3, 48($sp)
    lw   $t4, 44($sp)
    lw   $t5, 40($sp)
    lw   $t6, 36($sp)
    lw   $t7, 32($sp)
    lw   $t8, 28($sp)
    lw   $t9, 24($sp)
    addi $sp, $sp, 72
    jr   $ra
LABEL2:
main:
    move $fp, $sp
    addi $sp, $sp, -20
    sw   $ra, 16($sp)
    sw   $fp, 12($sp)
    li $a0, 5
    li $a1, 3
    jal addx
    move $t1, $v0
    move $t0, $t1
    la $a0, str0
    move $a1, $t0
    # Spilling a from $t9
#printf
 move $a0, $a0
    li $v0, 4
syscall
  li $v0, 4 
 la $a0, newline 
 syscall
    mov.s $f12, $f12
    li $v0, 2
syscall
  li $v0, 4 
 la $a0, newline 
 syscall
    move $t9, $v0
    move $t9, $v0
    li $v0, 0
    lw   $fp, 12($sp)
    lw   $ra, 16($sp)
    jr   $ra
    li $v0, 10
    syscall
File copied to Windows at: /mnt/c/Users/anups/Downloads/output.s
