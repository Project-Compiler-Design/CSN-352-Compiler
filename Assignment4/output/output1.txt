======================================================================
No Errors in the code
Intermediate code generated successfully
======================================================================
0x5c4a921194b0 FUNC_BEGIN add1
0x5c4a921217a0 a := PARAM
0x5c4a921217a0 b := PARAM
0x5c4a921217a0 c := PARAM
0x5c4a921217a0 d := PARAM
0x5c4a921217a0 e := PARAM
0x5c4a921217a0 f := PARAM
0x5c4a921217a0 RETURN a
0x5c4a921194b0 FUNC_END add1
0x5c4a921194b0 FUNC_BEGIN main
0x5c4a92122ae0 a:= 10
0x5c4a92122ae0 b:= 4.000000
0x5c4a92122ae0 c:= 3.140000
0x5c4a92122ae0 d:= 2
0x5c4a92122ae0 e:= 609
0x5c4a92122ae0 f:= 7.100000
0x5c4a92122ae0 PARAM a
0x5c4a92122ae0 PARAM b
0x5c4a92122ae0 PARAM c
0x5c4a92122ae0 PARAM d
0x5c4a92122ae0 PARAM e
0x5c4a92122ae0 PARAM f
0x5c4a92122ae0 t0 := CALL add1,6
0x5c4a92122ae0 g:= t0
0x5c4a92122ae0 RETURN 0
0x5c4a921194b0 FUNC_END main
======================================================================
Printing scope table
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| add1            | int                  | 4       | N/A        |
| main            | int                  | 4       | N/A        |
| printf          |                      | 0       | N/A        |
| scanf           |                      | 0       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| a               | int                  | 4       | N/A        |
| b               | float                | 4       | N/A        |
| c               | float                | 4       | N/A        |
| d               | int                  | 4       | N/A        |
| e               | int                  | 4       | N/A        |
| f               | float                | 4       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| a               | int                  | 4       | 10         |
| b               | float                | 4       | 4.000000   |
| c               | float                | 4       | 3.140000   |
| d               | int                  | 4       | 2          |
| e               | int                  | 4       | 609        |
| f               | float                | 4       | 7.100000   |
| g               | int                  | 4       | N/A        |
| t0              | int                  | 4       | N/A        |
-----------------------------------------------------------------
Hiiiii
a : int
current size: 4
Hiiiii
b : float
current size: 8
Hiiiii
c : float
current size: 12
Hiiiii
d : int
current size: 16
Hiiiii
e : int
current size: 20
Hiiiii
f : float
current size: 24
Function add1 stack size: 32
Hiiiii
a : int
current size: 4
Hiiiii
b : float
current size: 8
Hiiiii
c : float
current size: 12
Hiiiii
d : int
current size: 16
Hiiiii
e : int
current size: 20
Hiiiii
f : float
current size: 24
Hiiiii
g : int
current size: 28
Hiiiii
t0 : int
current size: 32
Function main stack size: 40
Pass 1 done
Error!!!! Variable add1,6 not found in any scope
Liveness analysis done
FUNC_BEGIN add1
a := PARAM
Handling param receive: a := PARAM
Getting register for a
Assigned register $t9 to a
b := PARAM
Handling param receive: b := PARAM
c := PARAM
Handling param receive: c := PARAM
d := PARAM
Handling param receive: d := PARAM
Getting register for d
Assigned register $t8 to d
e := PARAM
Handling param receive: e := PARAM
Getting register for e
Assigned register $t7 to e
f := PARAM
Handling param receive: f := PARAM
RETURN a
Getting register for a
Found register for a $t9
FUNC_END add1
FUNC_BEGIN main
a:= 10
Handling assignment: a := 10
Getting register for a
Assigned register $t6 to a
b:= 4.000000
Handling assignment: b := 4.000000
c:= 3.140000
Handling assignment: c := 3.140000
d:= 2
Handling assignment: d := 2
Getting register for d
Assigned register $t5 to d
e:= 609
Handling assignment: e := 609
Getting register for e
Assigned register $t4 to e
f:= 7.100000
Handling assignment: f := 7.100000
PARAM a
Getting register for a
Found register for a $t6
PARAM b
PARAM c
PARAM d
Getting register for d
Found register for d $t5
PARAM e
Getting register for e
Found register for e $t4
PARAM f
t0 := CALL add1,6
Handling assignment: t0 := CALL add1,6
Getting register for t0
Assigned register $t3 to t0
Handling function call: CALL add1,6
g:= t0
Handling assignment: g := t0
Getting register for g
Assigned register $t2 to g
Getting register for t0
Found register for t0 $t3
RETURN 0
FUNC_END main
Pass 2 done
################ MIPS Assembly Code ################ 
.text
.globl main
add1:
    move $fp, $sp
    addi $sp, $sp, -32
    sw   $ra, 28($sp)
    sw   $fp, 24($sp)
    move $t9, $a0
    mov.s $f7, $f14
    mov.s $f6, $f14
    move $t8, $a1
    move $t7, $a2
    #popping from stack to $f5
    l.s $f5, 0($fp)
    #pushing into function stack
    s.s $f5, 0($sp)
    move $v0, $t9
    lw   $fp, 24($sp)
    lw   $ra, 28($sp)
    addi $sp, $sp, 32
    jr   $ra
main:
    move $fp, $sp
    addi $sp, $sp, -40
    sw   $ra, 36($sp)
    sw   $fp, 32($sp)
    li $t6, 10
    li.s $f4, 4.000000
    li.s $f3, 3.140000
    li $t5, 2
    li $t4, 609
    li.s $f2, 7.100000
    move $a0, $t6
    mov.s $f12, $f4
    mov.s $f14, $f3
    move $a1, $t5
    move $a2, $t4
    addi $sp, $sp, -4 
    s.s $f2, 0($sp)
    jal add1
    move $t3, $v0
    move $t2, $t3
	 move $a0, $v0 
 	 li   $v0, 1 
 	 syscall
    li $v0, 0
    lw   $fp, 32($sp)
    lw   $ra, 36($sp)
    addi $sp, $sp, 40
    li $v0, 10
    syscall
