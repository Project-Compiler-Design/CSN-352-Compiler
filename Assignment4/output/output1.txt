======================================================================
No Errors in the code
Intermediate code generated successfully
======================================================================
0x5611931764b0 FUNC_BEGIN func
0x56119317e7a0 a := PARAM
0x56119317e7a0 b := PARAM
0x56119317e7a0 c := PARAM
0x56119317e7a0 d := PARAM
0x56119317e7a0 e := PARAM
0x56119317e7a0 f := PARAM
0x56119317e7a0 t0 :=  d + e
0x56119317e7a0 sum:= t0
0x56119317e7a0 RETURN sum
0x5611931764b0 FUNC_END func
0x5611931764b0 FUNC_BEGIN main
0x56119317fa00 x:= 10
0x56119317fa00 y:= 20
0x56119317fa00 z:= 30
0x56119317fa00 p:= 40
0x56119317fa00 q:= 50
0x56119317fa00 r:= 60
0x56119317fa00 PARAM x
0x56119317fa00 PARAM y
0x56119317fa00 PARAM z
0x56119317fa00 PARAM p
0x56119317fa00 PARAM q
0x56119317fa00 PARAM r
0x56119317fa00 t1 := CALL func,6
0x56119317fa00 result:= t1
0x56119317fa00 RETURN 0
0x5611931764b0 FUNC_END main
======================================================================
Printing scope table
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| func            | int                  | 4       | N/A        |
| main            | int                  | 4       | N/A        |
| printf          |                      | 0       | N/A        |
| scanf           |                      | 0       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| a               | int                  | 4       | N/A        |
| b               | int                  | 4       | N/A        |
| c               | int                  | 4       | N/A        |
| d               | int                  | 4       | N/A        |
| e               | int                  | 4       | N/A        |
| f               | int                  | 4       | N/A        |
| sum             | int                  | 4       | N/A        |
| t0              | int                  | 4       | N/A        |
-----------------------------------------------------------------
-----------------------------------------------------------------
| Identifier      | Type                 | Size    | Value      |
-----------------------------------------------------------------
| p               | int                  | 4       | 40         |
| q               | int                  | 4       | 50         |
| r               | int                  | 4       | 60         |
| result          | int                  | 4       | N/A        |
| t1              | int                  | 4       | N/A        |
| x               | int                  | 4       | 10         |
| y               | int                  | 4       | 20         |
| z               | int                  | 4       | 30         |
-----------------------------------------------------------------
Hiiiii
a : int
current size: 4
Hiiiii
b : int
current size: 8
Hiiiii
c : int
current size: 12
Hiiiii
d : int
current size: 16
Hiiiii
e : int
current size: 20
Hiiiii
f : int
current size: 24
Hiiiii
sum : int
current size: 28
Hiiiii
t0 : int
current size: 32
Function func stack size: 40
Hiiiii
p : int
current size: 4
Hiiiii
q : int
current size: 8
Hiiiii
r : int
current size: 12
Hiiiii
result : int
current size: 16
Hiiiii
t1 : int
current size: 20
Hiiiii
x : int
current size: 24
Hiiiii
y : int
current size: 28
Hiiiii
z : int
current size: 32
Function main stack size: 40
Pass 1 done
Error!!!! Variable func,6 not found in any scope
Liveness analysis done
FUNC_BEGIN func
a := PARAM
Handling param receive: a := PARAM
Getting register for a
Assigned register $t9 to a
b := PARAM
Handling param receive: b := PARAM
Getting register for b
Assigned register $t8 to b
c := PARAM
Handling param receive: c := PARAM
Getting register for c
Assigned register $t7 to c
d := PARAM
Handling param receive: d := PARAM
Getting register for d
Assigned register $t6 to d
e := PARAM
Handling param receive: e := PARAM
Getting register for e
Assigned register $t5 to e
f := PARAM
Handling param receive: f := PARAM
Getting register for f
Assigned register $t4 to f
t0 :=  d + e
Handling operation: t0 := d + e
Getting register for d
Found register for d $t6
Getting register for e
Found register for e $t5
Getting register for t0
Assigned register $t3 to t0
Operation: d + e
Registers: $t6, $t5, $t3
sum:= t0
Handling assignment: sum := t0
Getting register for sum
Assigned register $t2 to sum
Getting register for t0
Found register for t0 $t3
RETURN sum
Getting register for sum
Found register for sum $t2
FUNC_END func
FUNC_BEGIN main
x:= 10
Handling assignment: x := 10
Getting register for x
Assigned register $t1 to x
y:= 20
Handling assignment: y := 20
Getting register for y
Assigned register $t0 to y
z:= 30
Handling assignment: z := 30
Getting register for z
Handling register spill for z
Spilling a from $t9
Assigned register $t9 to z
p:= 40
Handling assignment: p := 40
Getting register for p
Handling register spill for p
Spilling b from $t8
Assigned register $t8 to p
q:= 50
Handling assignment: q := 50
Getting register for q
Handling register spill for q
Spilling c from $t7
Assigned register $t7 to q
r:= 60
Handling assignment: r := 60
Getting register for r
Handling register spill for r
Spilling d from $t6
Assigned register $t6 to r
PARAM x
Getting register for x
Found register for x $t1
PARAM y
Getting register for y
Found register for y $t0
PARAM z
Getting register for z
Found register for z $t9
PARAM p
Getting register for p
Found register for p $t8
PARAM q
Getting register for q
Found register for q $t7
PARAM r
Getting register for r
Found register for r $t6
t1 := CALL func,6
Handling assignment: t1 := CALL func,6
Getting register for t1
Handling register spill for t1
Spilling e from $t5
Assigned register $t5 to t1
Handling function call: CALL func,6
result:= t1
Handling assignment: result := t1
Getting register for result
Handling register spill for result
Spilling f from $t4
Assigned register $t4 to result
Getting register for t1
Found register for t1 $t5
RETURN 0
FUNC_END main
Pass 2 done
################ MIPS Assembly Code ################ 
func:
    move $fp, $sp
    addi $sp, $sp, -40
    sw   $ra, 36($sp)
    sw   $fp, 32($sp)
    move $t9, $a0
    move $t8, $a1
    move $t7, $a2
    move $t6, $a3
    #popping from stack to $t5
    lw $t5, -0($fp)
    #pushing into function stack
    sw $t5, 0($sp)
    #popping from stack to $t4
    lw $t4, -4($fp)
    #pushing into function stack
    sw $t4, 4($sp)
    add $t3, $t6, $t5
    move $t2, $t3
    move $v0, $t2
    move $sp, $fp
    lw   $fp, 32($sp)
    lw   $ra, 36($sp)
    addi $sp, $sp, 40
    jr   $ra
main:
    move $fp, $sp
    addi $sp, $sp, -40
    sw   $ra, 36($sp)
    sw   $fp, 32($sp)
    li $t1, 10
    li $t0, 20
    # Spilling a from $t9
    li $t9, 30
    # Spilling b from $t8
    li $t8, 40
    # Spilling c from $t7
    li $t7, 50
    # Spilling d from $t6
    li $t6, 60
    move $a0, $t1
    move $a1, $t0
    move $a2, $t9
    move $a3, $t8
    #pushing $t7 to stack
    addi $sp, $sp, -4
    sw $t7, 0($sp)
    #pushing $t6 to stack
    addi $sp, $sp, -4
    sw $t6, 0($sp)
    # Spilling e from $t5
    jal func,6
    move $t5, $v0
    # Spilling f from $t4
    move $t4, $t5
    li $v0, 0
    move $sp, $fp
    lw   $fp, 32($sp)
    lw   $ra, 36($sp)
    addi $sp, $sp, 40
    jr   $ra
